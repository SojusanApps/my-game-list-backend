from typing import Any

from django.contrib.auth import models as auth_models
from django.utils.functional import cached_property

from .settings import api_settings as api_settings
from .tokens import Token as Token

class TokenUser:
    is_active: bool
    token: Token

    def __init__(self, token: Token) -> None: ...
    @cached_property
    def id(self) -> Any: ...
    @cached_property
    def pk(self) -> Any: ...
    @cached_property
    def username(self) -> str: ...
    @cached_property
    def is_staff(self) -> bool: ...
    @cached_property
    def is_superuser(self) -> bool: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def save(self) -> None: ...
    def delete(self) -> None: ...
    def set_password(self, raw_password: str) -> None: ...
    def check_password(self, raw_password: str) -> bool: ...
    @property
    def groups(self) -> Any: ...
    @property
    def user_permissions(self) -> Any: ...
    def get_group_permissions(self, obj: Any | None = None) -> set[Any]: ...
    def get_all_permissions(self, obj: Any | None = None) -> set[Any]: ...
    def has_perm(self, perm: str, obj: Any | None = None) -> bool: ...
    def has_perms(self, perm_list: list[str], obj: Any | None = None) -> bool: ...
    def has_module_perms(self, module: str) -> bool: ...
    @property
    def is_anonymous(self) -> bool: ...
    @property
    def is_authenticated(self) -> bool: ...
    def get_username(self) -> str: ...
    def __getattr__(self, attr: str) -> Any: ...
